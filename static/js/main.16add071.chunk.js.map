{"version":3,"sources":["Random.js","App.js","reportWebVitals.js","index.js"],"names":["Random","useState","grid","setGrid","getRandomNumber","n","Math","floor","random","onClick","newGrid","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAsCeA,MApCf,WAEI,MAAwBC,mBACpB,CACI,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KALlB,mBAAOC,EAAP,KAAaC,EAAb,KASMC,EAAkB,SAACC,GAAD,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,IAe1D,OACI,gCACKH,EACD,uBAEA,wBAAQO,QAlBE,WACd,IAAIC,EAAU,CACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGdA,EAAQN,EAAgB,IAAIA,EAAgB,IAAM,EAClDM,EAAQN,EAAgB,IAAIA,EAAgB,IAAM,EAElDD,EAAQO,IAOJ,uBCtBGC,MATf,WAEE,OACE,8BACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.16add071.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nfunction Random() {\r\n\r\n    const [grid, setGrid] = useState(\r\n        [\r\n            [0, 0, 0, 0],\r\n            [0, 0, 0, 0],\r\n            [0, 0, 0, 0],\r\n            [0, 0, 0, 0],\r\n        ]\r\n    )\r\n\r\n    const getRandomNumber = (n) => Math.floor(Math.random() * n)\r\n    \r\n    const resetGrid = () => {\r\n        let newGrid = [\r\n            [0, 0, 0, 0],\r\n            [0, 0, 0, 0],\r\n            [0, 0, 0, 0],\r\n            [0, 0, 0, 0],\r\n        ]\r\n\r\n        newGrid[getRandomNumber(3)][getRandomNumber(3)] = 2\r\n        newGrid[getRandomNumber(3)][getRandomNumber(3)] = 2\r\n\r\n        setGrid(newGrid)\r\n    }\r\n    return (\r\n        <div>\r\n            {grid}\r\n            <br />\r\n\r\n            <button onClick={resetGrid}>Reset</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Random\r\n","import React from 'react'\nimport Random from './Random.js';\nfunction App() {\n\n  return (\n    <div>\n      <Random />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}